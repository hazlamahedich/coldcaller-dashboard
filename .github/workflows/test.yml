name: Test Cold Calling Dashboard

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [18.x, 20.x]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
    
    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v3
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
    
    - name: Install dependencies
      run: |
        cd frontend
        npm ci
    
    - name: Run linting
      run: |
        cd frontend
        npm run build --if-present
    
    - name: Run unit tests
      run: |
        cd frontend
        npm run test:unit -- --watchAll=false
    
    - name: Run integration tests
      run: |
        cd frontend
        npm run test:integration -- --watchAll=false
    
    - name: Run E2E tests
      run: |
        cd frontend
        npm run test:e2e -- --watchAll=false
    
    - name: Run all tests with coverage
      run: |
        cd frontend
        npm run test:ci
    
    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      if: matrix.node-version == '20.x'
      with:
        directory: ./frontend/coverage
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false
    
    - name: Archive coverage reports
      uses: actions/upload-artifact@v3
      if: matrix.node-version == '20.x'
      with:
        name: coverage-report
        path: frontend/coverage/
    
    - name: Comment test results on PR
      uses: actions/github-script@v6
      if: github.event_name == 'pull_request' && matrix.node-version == '20.x'
      with:
        script: |
          const fs = require('fs');
          const coverage = fs.readFileSync('frontend/coverage/coverage-summary.json', 'utf8');
          const data = JSON.parse(coverage);
          const total = data.total;
          
          const comment = `## Test Coverage Report 📊
          
          | Metric | Coverage | Status |
          |--------|----------|--------|
          | Lines | ${total.lines.pct}% | ${total.lines.pct >= 70 ? '✅' : '❌'} |
          | Statements | ${total.statements.pct}% | ${total.statements.pct >= 70 ? '✅' : '❌'} |
          | Functions | ${total.functions.pct}% | ${total.functions.pct >= 70 ? '✅' : '❌'} |
          | Branches | ${total.branches.pct}% | ${total.branches.pct >= 70 ? '✅' : '❌'} |
          
          **Minimum threshold:** 70%`;
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: comment
          });